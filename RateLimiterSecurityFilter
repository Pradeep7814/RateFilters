package com.example.filter;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.time.Instant;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

@Component
public class RateLimitingFilter implements Filter {

    private static final int MAX_REQUESTS = 150;
    private static final long TIME_WINDOW_MS = 60 * 1000; // 1 minute

    private final Map<String, ClientRequestInfo> clientRequestMap = new ConcurrentHashMap<>();

    @Override
    public void doFilter(jakarta.servlet.ServletRequest request, jakarta.servlet.ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {
            HttpServletRequest httpRequest = (HttpServletRequest) request;
            HttpServletResponse httpResponse = (HttpServletResponse) response;

            String clientIp = httpRequest.getRemoteAddr();
            long currentTime = Instant.now().toEpochMilli();

            clientRequestMap.compute(clientIp, (ip, clientRequestInfo) -> {
                if (clientRequestInfo == null || currentTime - clientRequestInfo.startTime > TIME_WINDOW_MS) {
                    return new ClientRequestInfo(currentTime, new AtomicInteger(1));
                } else {
                    clientRequestInfo.requestCount.incrementAndGet();
                    return clientRequestInfo;
                }
            });

            ClientRequestInfo clientRequestInfo = clientRequestMap.get(clientIp);
            if (clientRequestInfo.requestCount.get() > MAX_REQUESTS) {
                httpResponse.setStatus(HttpServletResponse.SC_TOO_MANY_REQUESTS);
                httpResponse.getWriter().write("Rate limit exceeded. Try again later.");
                return;
            }
        }

        chain.doFilter(request, response);
    }

    private static class ClientRequestInfo {
        private final long startTime;
        private final AtomicInteger requestCount;

        public ClientRequestInfo(long startTime, AtomicInteger requestCount) {
            this.startTime = startTime;
            this.requestCount = requestCount;
        }
    }
}
