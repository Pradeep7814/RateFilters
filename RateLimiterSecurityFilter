import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.servlet.HandlerInterceptor;

import java.time.Duration;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

@Component
public class RateLimitingInterceptor implements HandlerInterceptor {
    private static final int MAX_REQUESTS_PER_MINUTE = 60;
    private final ConcurrentHashMap<String, AtomicInteger> requestCounts = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<String, Long> timestamps = new ConcurrentHashMap<>();

    @Override
    public boolean preHandle(WebRequest request, NativeWebRequest nativeRequest, Object handler) throws Exception {
        String clientIp = nativeRequest.getHeader("X-Forwarded-For");
        if (clientIp == null || clientIp.isEmpty()) {
            clientIp = nativeRequest.getNativeRequest(javax.servlet.http.HttpServletRequest.class).getRemoteAddr();
        }

        long currentTime = System.currentTimeMillis();

        requestCounts.putIfAbsent(clientIp, new AtomicInteger(0));
        timestamps.putIfAbsent(clientIp, currentTime);

        if (currentTime - timestamps.get(clientIp) > Duration.ofMinutes(1).toMillis()) {
            requestCounts.get(clientIp).set(0);
            timestamps.put(clientIp, currentTime);
        }

        if (requestCounts.get(clientIp).incrementAndGet() > MAX_REQUESTS_PER_MINUTE) {
            nativeRequest.getNativeResponse(javax.servlet.http.HttpServletResponse.class)
                    .setStatus(HttpStatus.TOO_MANY_REQUESTS.value());
            return false; // Reject the request
        }

        return true; // Allow the request
    }
}
